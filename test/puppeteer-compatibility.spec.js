const puppeteerModule = require('puppeteer');
const puppeteer = puppeteerModule.default || puppeteerModule.puppeteer || puppeteerModule;
const { Cookie } = require('tough-cookie');
const { utils } = require('../dist/index.cjs.js');
const { serializeForPuppeteer } = utils;

describe('Puppeteer cookie compatibility', () => {
    let browser;
    let page;

    beforeEach(async () => {
        browser = await puppeteer.launch({
            headless: true,
            args: [
                '--incognito',
                '--start-in-incognito',
                '--no-sandbox',
                '--disable-setuid-sandbox',
            ],
        }, 10000);

        page = await browser.newPage();
    });

    test('should be able to set cookies using minimal properties from tough-cookie', async () => {
        // Create a tough-cookie Cookie
        const toughCookie = new Cookie({
            key: "test_minimal",
            value: "minimal_value",
            domain: "example.com",
            path: "/",
            secure: false,
            httpOnly: false,
            expires: new Date(Date.now() + 86400000) // 1 day from now
        });

        // Convert to Puppeteer format (this loses additional properties)
        const puppeteerCookieData = serializeForPuppeteer(toughCookie);

        // Try to set the cookie using Puppeteer CDP
        const client = await page.target().createCDPSession();
        
        // This should work even without size, session, priority, etc.
        await expect(
            client.send("Network.setCookie", puppeteerCookieData)
        ).resolves.toBeDefined();

        // Verify the cookie was actually set by reading it back
        const result = await client.send("Network.getCookies", {
            urls: ["https://example.com"]
        });

        const setCookie = result.cookies.find(c => c.name === "test_minimal");
        expect(setCookie).toBeDefined();
        expect(setCookie.value).toBe("minimal_value");
        
        // The cookie read back will have additional properties that weren't in the original
        expect(setCookie.size).toBeDefined(); // This gets auto-calculated
        expect(setCookie.session).toBeDefined(); // This gets auto-determined
        // priority, sourceScheme, sourcePort may or may not be present depending on browser version
    });

    test('should verify what properties are auto-generated by Puppeteer', async () => {
        const client = await page.target().createCDPSession();

        // Set a minimal cookie
        await client.send("Network.setCookie", {
            name: "auto_props_test",
            value: "test_value",
            domain: "example.com",
            path: "/",
            secure: true,
            httpOnly: false
        });

        // Read it back to see what properties Puppeteer adds
        const result = await client.send("Network.getCookies", {
            urls: ["https://example.com"]
        });

        const cookie = result.cookies.find(c => c.name === "auto_props_test");
        console.log("Cookie properties auto-generated by Puppeteer:", Object.keys(cookie));
        console.log("Full cookie object:", JSON.stringify(cookie, null, 2));

        // Basic properties should be preserved
        expect(cookie.name).toBe("auto_props_test");
        expect(cookie.value).toBe("test_value");
        expect(cookie.domain).toBe("example.com");
        expect(cookie.path).toBe("/");
        expect(cookie.secure).toBe(true);
        expect(cookie.httpOnly).toBe(false);
    });

    afterEach(async () => {
        await browser.close();
    });
});
